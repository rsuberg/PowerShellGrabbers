$uri = Read-Host "GitHub RAW uri"; iex ( iwr -Uri $uri).content
#HardwareReadiness.ps1 - https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/refs/heads/main/HardwareReadiness.ps1
iex ( iwr -Uri 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/refs/heads/main/HardwareReadiness.ps1' -UseBasicParsing).content

#Single File System Summary
# https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/refs/heads/main/Show-PCSummary-Unloaded.ps1
iex ( iwr -Uri 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/refs/heads/main/Show-PCSummary-Unloaded.ps1' -UseBasicParsing).content

$uri = 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/All-CustomServerFunctions-1.ps1'; iex ( iwr -Uri $uri -UseBasicParsing).content
$uri = 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/All-Summary-Functions.ps1'; iex ( iwr -Uri $uri -UseBasicParsing).content
$uri = 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/Show-MemorySummary.ps1'; iex ( iwr -Uri $uri -UseBasicParsing).content; Show-MemorySummary
$uri = 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/WMI-Details.ps1'; $z = iex ( iwr -Uri $uri -UseBasicParsing).content

$Global

$host.PrivateData.ErrorBackgroundColor = 'Red'
$host.PrivateData.ErrorForegroundColor = 'White'
$ErrorActionPreference = 'Continue'

$uri = 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/refs/heads/main/Get-LicenseArray.ps1'; iex ( iwr -Uri $uri -UseBasicParsing).content
@('_Dell-Warranty-API.ps1','_Pax8-Functions.ps1') | % {$d = "https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/" + $_;iex ( iwr -usebasicparsing -Uri $d ).content;"#"}

$t = $host.UI.RawUI.WindowTitle
@("All-Summary-Functions.ps1","All-CustomServerFunctions-1.ps1","Show-MemorySummary.ps1","WMI-Details.ps1","VMFunctions.ps1") | 
   % {
      $host.UI.RawUI.WindowTitle = $_
      $d = "https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/" + $_;
	  $x = iex ( iwr -Uri $d -UseBasicParsing).content;
   }
$host.UI.RawUI.WindowTitle = $t
cls; Show-AvailableCustomfunctions


$host.PrivateData.ErrorBackgroundColor = 'Red'
$host.PrivateData.ErrorForegroundColor = 'White'
$ErrorActionPreference = 'Continue'

$uri = 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/refs/heads/main/Get-LicenseArray.ps1'; iex ( iwr -Uri $uri -UseBasicParsing).content
@('_Dell-Warranty-API.ps1','_Pax8-Functions.ps1') | % {$d = "https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/" + $_;iex ( iwr -usebasicparsing -Uri $d ).content;"#"}

#ProgressBar Status
CLS
$global:Count = 0; $Global:NoGlobalClear = $true; $Global:NoGlobalOutput = $true
@('All-CustomServerFunctions-1.ps1','All-Summary-Functions.ps1','Show-MemorySummary.ps1','WMI-Details.ps1','VMFunctions.ps1','_Dell-Warranty-API.ps1','_Pax8-Functions.ps1') | 
   % {
      $Global:Count ++; $Global:Count; $Global:ScrName = $_
      Write-Progress -Activity "Loading Web PowerShell Functions" -Status $_ -PercentComplete (($global:Count/7)*100)
      $d = "https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/" + $_;
	  "$_ `t`t$d"
	  $c = iwr -Uri $d -UseBasicParsing
	  #$c | fl StatusCode, StatusDescription, RawContentLength
	  $x = iex $c.content;
	  Sleep 3
   }
   $Global:Count; $Global:ScrName
   
cls
Show-AvailableCustomfunctions

Clear-Host; Show-PCSummary -SkipMemorySummary;Show-MemorySummary;Show-Processor

&{
$lp = 0; clear-host; "`n`n`n`n`n`n"
$fn = @("All-Summary-Functions.ps1","All-CustomServerFunctions-1.ps1","Show-MemorySummary.ps1","WMI-Details.ps1") 
$fn | % {
      $lp++
      Write-Progress -PercentComplete (($lp/$fn.count)*100) -Activity Loading -Status $_
	  sleep 1
      $d = "https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/" + $_;
	  $x = iex ( iwr -Uri $d -UseBasicParsing).content;
   }
}

Clear-Host; Show-PCSummary -SkipMemorySummary;Show-MemorySummary;Show-Processor

iex ( iwr  -Uri "https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/_Dell-Warranty-API.ps1" -UseBasicParsing).content

----------
Windows11 Compatibility:
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
y
$r = iex ([System.Text.Encoding]::UTF8.GetString(( iwr -Uri https://aka.ms/HWReadinessScript -UseBasicParsing).content))
($r[1]|convertfrom-json) | select returnResult, returnReason | fl
($r[1]|convertfrom-json).logging.split(";")

 $uri = "https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/HardwareReadiness.ps1"; $a = (iex ( iwr -Uri $uri).content);$a[0];$a[1].split(";")

 ------------------------------------------------MS365 License Array--------------------------------------------
https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/refs/heads/main/Get-LicenseArray.ps1

$uri = 'https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/Show-MemorySummary.ps1'; iex ( iwr -Uri $uri -UseBasicParsing).content; Show-MemorySummary

MAIN BRANCH:
https://github.com/rsuberg/PowerShellGrabbers/tree/main

https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/Show-MemorySummary.ps1
https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/All-Summary-Functions.ps1
https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/All-CustomServerFunctions-1.ps1
https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/_Dell-Warranty-API.ps1
https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/main/_Pax8-Functions.ps1
https://raw.githubusercontent.com/rsuberg/PowerShellGrabbers/refs/heads/main/VMFunctions.ps1

https://github.com/rsuberg/PowerShellGrabbers/blob/main/Show-MemorySummary.ps1
https://github.com/rsuberg/PowerShellGrabbers/blob/main/All-Summary-Functions.ps1
https://github.com/rsuberg/PowerShellGrabbers/blob/main/All-CustomServerFunctions-1.ps1
https://github.com/rsuberg/PowerShellGrabbers/blob/main/_Dell-Warranty-API.ps1
https://github.com/rsuberg/PowerShellGrabbers/blob/main/main/_Pax8-Functions.ps1
https://github.com/rsuberg/PowerShellGrabbers/blob/main/WMI-Details.ps1


Security issue:
[Net.ServicePointManager]::SecurityProtocol
[Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls
Add-Type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@

Confident Security Restored:
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::SystemDefault


(GET-ADUSER –Identity (read-host "User") –Properties MemberOf | Select-Object MemberOf).MemberOf
 Get-ADUser -Filter * -SearchBase "OU=Barcom Tech,OU=Domain Users,DC=windcrest-tx,DC=gov" -Properties * | where enabled -eq $true | select displayname, lastlogondate, samaccountname
 
 Show-EOLInfo; Show-MemorySummary; Show-Disks; get-tpm | select TpmPresent, TpmReady, ManufacturerVersionFull20 | ft